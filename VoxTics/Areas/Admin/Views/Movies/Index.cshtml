@model VoxTics.Helpers.PaginatedList<VoxTics.Areas.Admin.ViewModels.Movie.MovieListItemViewModel>

@{
    ViewData["Title"] = "Movies";
    // Friendly helpers (read from ViewData/ViewBag whichever you used)
    var currentSearch = (ViewData["CurrentSearch"] ?? ViewBag.search ?? string.Empty)?.ToString();
    var sortColumn = (ViewData["SortColumn"] ?? ViewBag.sortColumn ?? string.Empty)?.ToString();
    object sortDescObj = ViewData["SortDesc"] ?? ViewBag.sortDescending;
    bool sortDescending = false;
    if (sortDescObj != null)
    {
        bool.TryParse(sortDescObj.ToString(), out sortDescending);
    }
}

<h1 class="mb-3">Movies</h1>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success" role="alert">@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger" role="alert">@TempData["Error"]</div>
}

<div class="mb-3 d-flex justify-content-between align-items-center">
    <form method="get" asp-action="Index" class="d-flex" role="search" aria-label="Search movies">
        <input type="text" name="search" value="@currentSearch" class="form-control me-2" placeholder="Search..." />
        <input type="hidden" name="sortColumn" value="@sortColumn" />
        <input type="hidden" name="sortDescending" value="@(sortDescending.ToString().ToLower())" />
        <button type="submit" class="btn btn-primary">Search</button>
    </form>

    <div class="d-flex align-items-center">
        <a class="btn btn-success me-2" asp-action="Create">Add New Movie</a>

        <!-- Toggle button -->
        <div class="btn-group" role="group" aria-label="View toggle">
            <button id="toggleViewBtn" type="button" class="btn btn-secondary" aria-pressed="false">Switch to Table View</button>
        </div>
    </div>
</div>

@if (!Model.Items.Any())
{
    <div class="alert alert-info text-center">
        <h4 class="mb-1">No movies found</h4>
        <p class="mb-0">@(!string.IsNullOrWhiteSpace(currentSearch) ? "Try different keywords or clear search." : "There are no movies yet.")</p>
    </div>
}
else
{
    <!-- Card View -->
    <div id="cardView" class="mb-4">
        @* Featured movie (first) *@
        @{
            var featured = Model.Items.First();
        }
        <div class="mb-3">
            @await Html.PartialAsync("~/Areas/Admin/Views/Movies/_MovieCards.cshtml", featured)
        </div>

        <div class="row gy-4">
            @foreach (var movie in Model.Items.Skip(1))
            {
                <div class="col-12 col-sm-6 col-md-4">
                    @await Html.PartialAsync("~/Areas/Admin/Views/Movies/_MovieCards.cshtml", movie)
                </div>
            }
        </div>
    </div>

    <!-- Table View (hidden by default) -->
    <div id="tableView" class="table-responsive mt-4" style="display:none;">
        <table class="table table-striped table-hover align-middle">
            <thead>
                <tr>
                    <th style="width:90px">Poster</th>
                    <th>
                        <a asp-action="Index"
                           asp-route-sortColumn="Title"
                           asp-route-sortDescending="@(sortColumn == "Title" ? (!sortDescending).ToString().ToLower() : "false")"
                           asp-route-search="@currentSearch">
                            Title
                        </a>
                    </th>
                    <th>Category</th>
                    <th style="width:120px">Showtimes</th>
                    <th>
                        <a asp-action="Index"
                           asp-route-sortColumn="Price"
                           asp-route-sortDescending="@(sortColumn == "Price" ? (!sortDescending).ToString().ToLower() : "false")"
                           asp-route-search="@currentSearch">
                            Price
                        </a>
                    </th>
                    <th>Status</th>
                    <th style="width:220px">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var movie in Model.Items)
                {
                    @await Html.PartialAsync("~/Areas/Admin/Views/Movies/_MovieTable.cshtml", movie)
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="d-flex flex-column flex-sm-row justify-content-between align-items-center mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination mb-2 mb-sm-0">
                @if (Model.PageIndex > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.PageIndex - 1)"
                           asp-route-search="@currentSearch" asp-route-sortColumn="@sortColumn" asp-route-sortDescending="@sortDescending">
                            ‹ Prev
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled"><span class="page-link">‹ Prev</span></li>
                }

                @{
                    var start = Math.Max(1, Model.PageIndex - 2);
                    var end = Math.Min(Model.TotalPages, Model.PageIndex + 2);
                    if (start > 1)
                    {
                        <li class="page-item"><a class="page-link" asp-action="Index" asp-route-page="1" asp-route-search="@currentSearch">1</a></li>
                        ;
                        if (start > 2)
                        {
                            <li class="page-item disabled"><span class="page-link">…</span></li>
                            ;
                        }
                    }
                }

                @for (int i = start; i <= end; i++)
                {
                    if (i == Model.PageIndex)
                    {
                        <li class="page-item active" aria-current="page"><span class="page-link">@i</span></li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-search="@currentSearch" asp-route-sortColumn="@sortColumn" asp-route-sortDescending="@sortDescending">@i</a>
                        </li>
                    }
                }

                @if (end < Model.TotalPages)
                {
                    if (end < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled"><span class="page-link">…</span></li>
                    }
                    <li class="page-item"><a class="page-link" asp-action="Index" asp-route-page="@Model.TotalPages" asp-route-search="@currentSearch">@Model.TotalPages</a></li>
                }

                @if (Model.PageIndex < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.PageIndex + 1)"
                           asp-route-search="@currentSearch" asp-route-sortColumn="@sortColumn" asp-route-sortDescending="@sortDescending">
                            Next ›
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled"><span class="page-link">Next ›</span></li>
                }
            </ul>
        </nav>

        <div class="ms-0 ms-sm-3 text-muted">
            Showing @((Model.PageIndex - 1) * Model.PageSize + 1) to @Math.Min(Model.PageIndex * Model.PageSize, Model.TotalCount) of @Model.TotalCount movies
            @if (!string.IsNullOrWhiteSpace(currentSearch))
            {
                <span> for "@currentSearch"</span>
            }
        </div>
    </div>
}

@section Scripts {
    <script>
        (function () {
            const toggleBtn = document.getElementById('toggleViewBtn');
            const cardView = document.getElementById('cardView');
            const tableView = document.getElementById('tableView');
            const storageKey = 'adminMoviesView';

            function setView(view) {
                if (view === 'table') {
                    cardView.style.display = 'none';
                    tableView.style.display = '';
                    toggleBtn.textContent = 'Switch to Card View';
                    toggleBtn.setAttribute('aria-pressed', 'true');
                } else { // default to cards
                    cardView.style.display = '';
                    tableView.style.display = 'none';
                    toggleBtn.textContent = 'Switch to Table View';
                    toggleBtn.setAttribute('aria-pressed', 'false');
                }
                try { localStorage.setItem(storageKey, view); } catch { }
            }

            // On load: read saved view; if none, use cards
            let savedView = 'cards';
            try {
                const stored = localStorage.getItem(storageKey);
                if (stored === 'table' || stored === 'cards') savedView = stored;
            } catch { }
            setView(savedView);

            // Toggle click handler
            toggleBtn.addEventListener('click', () => {
                const isCards = cardView.style.display !== 'none';
                setView(isCards ? 'table' : 'cards');
            });
        })();
    </script>
}

