@model IEnumerable<VoxTics.Areas.Admin.ViewModels.Booking.BookingViewModel>
@{
    ViewData["Title"] = "Bookings";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">
            <i class="fas fa-calendar-check me-2"></i>Bookings Management
        </h2>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-primary" id="refreshBtn">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#exportModal">
                <i class="fas fa-download"></i> Export
            </button>
        </div>
    </div>

    <!-- Enhanced Search and Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="searchForm" class="row g-3">
                <div class="col-md-4">
                    <label for="searchInput" class="form-label">Search</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" id="searchInput" name="search" value="@ViewBag.Search" 
                               placeholder="Search by name, email, phone..." class="form-control" />
                        <button type="button" id="clearSearch" class="btn btn-outline-secondary">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                
                <div class="col-md-2">
                    <label for="statusFilter" class="form-label">Status</label>
                    <select name="status" id="statusFilter" class="form-select">
                        <option value="">All Statuses</option>
                        <option value="confirmed">Confirmed</option>
                        <option value="pending">Pending</option>
                        <option value="cancelled">Cancelled</option>
                        <option value="completed">Completed</option>
                    </select>
                </div>
                
                <div class="col-md-2">
                    <label for="dateFrom" class="form-label">Date From</label>
                    <input type="date" id="dateFrom" name="dateFrom" class="form-control" value="@ViewBag.DateFrom" />
                </div>
                
                <div class="col-md-2">
                    <label for="dateTo" class="form-label">Date To</label>
                    <input type="date" id="dateTo" name="dateTo" class="form-control" value="@ViewBag.DateTo" />
                </div>
                
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Results Summary -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="d-flex align-items-center">
                <span class="text-muted me-2">Show:</span>
                @{
                    var pageSizes = new int[] { 10, 25, 50, 100 };
                }

                <select id="pageSizeSelect" class="form-select form-select-sm" style="width: auto;">
                    @foreach (var size in pageSizes)
                    {
                        <option value="@size" selected="@(ViewBag.PageSize == size ? "selected" : null)">@size</option>
                    }
                </select>

                <span class="text-muted ms-2">entries</span>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <span class="text-muted">
                Showing @((ViewBag.PageIndex * ViewBag.PageSize) + 1) to 
                @(Math.Min((ViewBag.PageIndex + 1) * ViewBag.PageSize, ViewBag.TotalCount)) 
                of @ViewBag.TotalCount entries
            </span>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="text-center py-5" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="mt-2">Loading bookings...</div>
    </div>

    <!-- Booking Table Container -->
    <div id="bookingTableContainer" class="position-relative">
        @await Html.PartialAsync("_BookingTablePartial", Model)
    </div>

    <!-- Enhanced Pagination -->
    <div id="pagination" class="d-flex justify-content-between align-items-center mt-4">
        <div class="pagination-info text-muted">
            <!-- Auto-populated by JavaScript -->
        </div>
        <nav aria-label="Bookings pagination">
            <ul class="pagination pagination-sm mb-0">
                @{
                    int totalPages = (int)Math.Ceiling((double)ViewBag.TotalCount / ViewBag.PageSize);
                    int currentPage = ViewBag.PageIndex;
                    int startPage = Math.Max(0, currentPage - 2);
                    int endPage = Math.Min(totalPages - 1, currentPage + 2);
                }
                
                @if (currentPage > 0)
                {
                    <li class="page-item">
                        <a class="page-link page-link-nav" href="#" data-page="0" aria-label="First">
                            <i class="fas fa-angle-double-left"></i>
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link page-link-nav" href="#" data-page="@(currentPage - 1)" aria-label="Previous">
                            <i class="fas fa-angle-left"></i>
                        </a>
                    </li>
                }
                
                @if (startPage > 0)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                
                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link page-link-num" href="#" data-page="@i">@(i + 1)</a>
                    </li>
                }
                
                @if (endPage < totalPages - 1)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                
                @if (currentPage < totalPages - 1)
                {
                    <li class="page-item">
                        <a class="page-link page-link-nav" href="#" data-page="@(currentPage + 1)" aria-label="Next">
                            <i class="fas fa-angle-right"></i>
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link page-link-nav" href="#" data-page="@(totalPages - 1)" aria-label="Last">
                            <i class="fas fa-angle-double-right"></i>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportModalLabel">Export Bookings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Export Format</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportExcel" value="excel" checked>
                        <label class="form-check-label" for="exportExcel">Excel (.xlsx)</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportCsv" value="csv">
                        <label class="form-check-label" for="exportCsv">CSV (.csv)</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportPdf" value="pdf">
                        <label class="form-check-label" for="exportPdf">PDF (.pdf)</label>
                    </div>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="exportFiltered" checked>
                    <label class="form-check-label" for="exportFiltered">Export only filtered results</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="exportBtn">
                    <i class="fas fa-download"></i> Export
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Notifications -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <i class="fas fa-check-circle me-2"></i>
            <strong class="me-auto">Success</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body"></div>
    </div>
    <div id="errorToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-danger text-white">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <strong class="me-auto">Error</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body"></div>
    </div>
</div>

@section Styles {
    <style>
        .table-hover tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.05);
        }
        
        .booking-status {
            font-size: 0.875rem;
            font-weight: 500;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .booking-actions .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
        
        .search-highlight {
            background-color: yellow;
            font-weight: bold;
        }
        
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
    <script>
        $(document).ready(function() {
            let searchTimeout;
            
            // Show toast notifications
            function showToast(type, message) {
                const toast = $(`#${type}Toast`);
                toast.find('.toast-body').text(message);
                const bsToast = new bootstrap.Toast(toast[0]);
                bsToast.show();
            }
            
            // Show/hide loading spinner
            function toggleLoading(show) {
                if (show) {
                    $('#loadingSpinner').show();
                    $('#bookingTableContainer').css('opacity', '0.5');
                } else {
                    $('#loadingSpinner').hide();
                    $('#bookingTableContainer').css('opacity', '1').addClass('fade-in');
                }
            }
            
            // Update pagination info
            function updatePaginationInfo() {
                const pageIndex = @ViewBag.PageIndex;
                const pageSize = @ViewBag.PageSize;
                const totalCount = @ViewBag.TotalCount;
                const start = (pageIndex * pageSize) + 1;
                const end = Math.min((pageIndex + 1) * pageSize, totalCount);
                $('.pagination-info').text(`Showing ${start} to ${end} of ${totalCount} entries`);
            }
            
            // Load data with AJAX
            function loadData(params = {}) {
                toggleLoading(true);
                
                const defaultParams = {
                    pageIndex: 0,
                    pageSize: $('#pageSizeSelect').val() || @ViewBag.PageSize,
                    search: $('#searchInput').val(),
                    status: $('#statusFilter').val(),
                    dateFrom: $('#dateFrom').val(),
                    dateTo: $('#dateTo').val()
                };
                
                const finalParams = { ...defaultParams, ...params };
                
                $.ajax({
                    url: '@Url.Action("Index")',
                    type: 'GET',
                    data: finalParams,
                    success: function(data) {
                        const $data = $(data);
                        $("#bookingTableContainer").html($data.find("#bookingTableContainer").html());
                        $("#pagination").html($data.find("#pagination").html());
                        updatePaginationInfo();
                        showToast('success', 'Data loaded successfully');
                    },
                    error: function(xhr) {
                        showToast('error', 'Failed to load data: ' + xhr.responseText);
                    },
                    complete: function() {
                        toggleLoading(false);
                    }
                });
            }
            
            // AJAX Cancel Booking with SweetAlert
            $(document).on("click", ".cancel-booking", function() {
                const bookingId = $(this).data("id");
                const bookingRef = $(this).data("reference") || `#${bookingId}`;
                
                if (!confirm(`Are you sure you want to cancel booking ${bookingRef}?`)) return;
                
                const $btn = $(this);
                const originalText = $btn.html();
                $btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Cancelling...');
                
                $.ajax({
                    url: '@Url.Action("ForceCancel")',
                    type: 'POST',
                    data: { bookingId: bookingId },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        showToast('success', response.message || 'Booking cancelled successfully');
                        
                        // Animate row removal
                        const $row = $("#bookingRow_" + bookingId);
                        $row.fadeOut(300, function() {
                            $(this).remove();
                        });
                        
                        // Update counters if they exist
                        setTimeout(() => {
                            loadData({ pageIndex: @ViewBag.PageIndex });
                        }, 300);
                    },
                    error: function(xhr) {
                        let errorMessage = 'Failed to cancel booking';
                        try {
                            const error = JSON.parse(xhr.responseText);
                            errorMessage = error.message || errorMessage;
                        } catch (e) {
                            errorMessage = xhr.responseText || errorMessage;
                        }
                        showToast('error', errorMessage);
                        $btn.prop('disabled', false).html(originalText);
                    }
                });
            });
            
            // Enhanced Pagination
            $(document).on("click", ".page-link-num, .page-link-nav", function(e) {
                e.preventDefault();
                const pageIndex = $(this).data("page");
                loadData({ pageIndex: pageIndex });
            });
            
            // Real-time search with debouncing
            $('#searchInput').on('input', function() {
                clearTimeout(searchTimeout);
                const searchTerm = $(this).val();
                
                searchTimeout = setTimeout(() => {
                    loadData({ pageIndex: 0, search: searchTerm });
                }, 500);
            });
            
            // Clear search
            $('#clearSearch').click(function() {
                $('#searchInput').val('');
                loadData({ pageIndex: 0, search: '' });
            });
            
            // Form submission
            $("#searchForm").submit(function(e) {
                e.preventDefault();
                loadData({ pageIndex: 0 });
            });
            
            // Page size change
            $('#pageSizeSelect').change(function() {
                loadData({ pageIndex: 0, pageSize: $(this).val() });
            });
            
            // Filter changes
            $('#statusFilter, #dateFrom, #dateTo').change(function() {
                loadData({ pageIndex: 0 });
            });
            
            // Refresh button
            $('#refreshBtn').click(function() {
                loadData({ pageIndex: @ViewBag.PageIndex });
            });
            
            // Export functionality
            $('#exportBtn').click(function() {
                const format = $('input[name="exportFormat"]:checked').val();
                const filtered = $('#exportFiltered').is(':checked');
                
                let params = { format: format };
                
                if (filtered) {
                    params = {
                        ...params,
                        search: $('#searchInput').val(),
                        status: $('#statusFilter').val(),
                        dateFrom: $('#dateFrom').val(),
                        dateTo: $('#dateTo').val()
                    };
                }
                
                // Create a form and submit it to trigger download
                const form = $('<form>', {
                    method: 'POST',
                    action: '@Url.Action("Export")'
                });
                
                $.each(params, function(key, value) {
                    if (value) {
                        form.append($('<input>', {
                            type: 'hidden',
                            name: key,
                            value: value
                        }));
                    }
                });
                
                // Add anti-forgery token
                form.append($('input[name="__RequestVerificationToken"]').clone());
                
                $('body').append(form);
                form.submit();
                form.remove();
                
                $('#exportModal').modal('hide');
                showToast('success', 'Export started. Download will begin shortly.');
            });
            
            // Keyboard shortcuts
            $(document).keydown(function(e) {
                // Ctrl/Cmd + F for search focus
                if ((e.ctrlKey || e.metaKey) && e.keyCode === 70) {
                    e.preventDefault();
                    $('#searchInput').focus();
                }
                
                // Escape to clear search
                if (e.keyCode === 27 && $('#searchInput').is(':focus')) {
                    $('#clearSearch').click();
                }
            });
            
            // Auto-refresh every 5 minutes (optional)
            setInterval(() => {
                loadData({ pageIndex: @ViewBag.PageIndex });
            }, 300000); // 5 minutes
            
            // Initialize pagination info
            updatePaginationInfo();
        });
    </script>
}