@model VoxTics.Helpers.PaginatedList<VoxTics.Models.ViewModels.MovieVM>

@{
    var filter = ViewBag.Filter as VoxTics.Models.ViewModels.BasePaginatedFilterVM ?? new VoxTics.Models.ViewModels.BasePaginatedFilterVM();
    var categories = ViewBag.Categories as List<VoxTics.Models.Entities.Category> ?? new List<VoxTics.Models.Entities.Category>();
    var selectedCategoryId = ViewBag.SelectedCategoryId as int? ?? 0;
}

<div class="container py-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start gap-3 mb-4">
        <h2 class="mb-0">🎬 @((selectedCategoryId > 0) ? (categories.FirstOrDefault(c => c.Id == selectedCategoryId)?.Name ?? "Category") : "All Movies")</h2>

        <form class="row g-2 align-items-center" method="get" asp-action="Index">
            <div class="col-auto">
                <input name="SearchTerm" value="@filter.SearchTerm" class="form-control form-control-sm" placeholder="Search title, description or director" />
            </div>
            <div class="col-auto">
                <select name="categoryId" class="form-select form-select-sm">
                    <option value="0" selected="@(selectedCategoryId == 0)">All categories</option>
                    @foreach (var c in categories)
                    {
                        <option value="@c.Id" selected="@(c.Id == selectedCategoryId)">
                            @c.Name
                        </option>
                    }
                </select>
            </div>
            <div class="col-auto">
                <select name="SortBy" class="form-select form-select-sm">
                    <option value="releasedate" selected="@(string.IsNullOrEmpty(filter.SortBy) || filter.SortBy == "releasedate")">Release date</option>
                    <option value="title" selected="@(filter.SortBy == "title")">Title</option>
                    <option value="price" selected="@(filter.SortBy == "price")">Price</option>
                    <option value="duration" selected="@(filter.SortBy == "duration")">Duration</option>
                </select>
            </div>
            <div class="col-auto">
                <select name="SortOrder" class="form-select form-select-sm">
                    <option value="Desc" selected="@(filter.SortOrder == VoxTics.Models.Enums.SortOrder.Desc)">Desc</option>
                    <option value="Asc" selected="@(filter.SortOrder == VoxTics.Models.Enums.SortOrder.Asc)">Asc</option>
                </select>
            </div>
            <div class="col-auto">
                <select name="PageSize" class="form-select form-select-sm">
                    <option value="8" selected="@(filter.PageSize == 8)">8</option>
                    <option value="12" selected="@(filter.PageSize == 12)">12</option>
                    <option value="24" selected="@(filter.PageSize == 24)">24</option>
                </select>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary btn-sm">Apply</button>
            </div>
        </form>
    </div>

    <div class="row g-4">
        @if (!Model.Any())
        {
            <div class="col-12">
                <div class="alert alert-info">No movies found.</div>
            </div>
        }
        else
        {
            @foreach (var movie in Model)
            {
                <div class="col-sm-6 col-md-4 col-lg-3">
                    @await Html.PartialAsync("~/Views/Movies/_MovieCards.cshtml", movie)
                </div>
            }
        }
    </div>

    <!-- Pager -->
    <div class="mt-4 d-flex justify-content-between align-items-center">
        <div class="text-muted small">
            Showing @Model.StartItem - @Model.EndItem of @Model.TotalCount
        </div>

        <nav aria-label="Page navigation">
            <ul class="pagination mb-0">
                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link" href="@(Url.Action("Index", RouteValuesForPage(Model.PageIndex - 1, Model.PageSize, filter, selectedCategoryId)))" aria-label="Previous">
                        ‹
                    </a>
                </li>

                @foreach (var p in Model.GetPageNumbers(7))
                {
                    <li class="page-item @(p == Model.PageIndex ? "active" : "")">
                        <a class="page-link" href="@(Url.Action("Index", RouteValuesForPage(p, Model.PageSize, filter, selectedCategoryId)))">@p</a>
                    </li>
                }

                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    <a class="page-link" href="@(Url.Action("Index", RouteValuesForPage(Model.PageIndex + 1, Model.PageSize, filter, selectedCategoryId)))" aria-label="Next">
                        ›
                    </a>
                </li>
            </ul>
        </nav>
    </div>
</div>

@functions {
    // helper to keep the querystring when building pager links
    private object RouteValuesForPage(int page, int pageSize, VoxTics.Models.ViewModels.BasePaginatedFilterVM filter, int categoryId)
    {
        var dict = new Dictionary<string, object?>
        {
            ["PageNumber"] = page,
            ["PageSize"] = pageSize
        };

        if (!string.IsNullOrEmpty(filter?.SearchTerm)) dict["SearchTerm"] = filter.SearchTerm;
        if (!string.IsNullOrEmpty(filter?.SortBy)) dict["SortBy"] = filter.SortBy;
        dict["SortOrder"] = filter?.SortOrder.ToString() ?? "Desc";
        if (categoryId > 0) dict["categoryId"] = categoryId;
        if (filter?.StartDate != null) dict["StartDate"] = filter.StartDate.Value.ToString("yyyy-MM-dd");
        if (filter?.EndDate != null) dict["EndDate"] = filter.EndDate.Value.ToString("yyyy-MM-dd");

        return dict;
    }
}
<div class="modal fade" id="movieDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const modal = new bootstrap.Modal(document.getElementById("movieDetailsModal"));
            const modalContent = document.querySelector("#movieDetailsModal .modal-content");

            document.querySelectorAll(".view-details").forEach(btn => {
                btn.addEventListener("click", function () {
                    const url = this.getAttribute("data-url");

                    // Show loader
                    modalContent.innerHTML = `
                        <div class="modal-body text-center p-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    `;
                    modal.show();

                    // Load partial content
                    fetch(url)
                        .then(response => response.text())
                        .then(html => {
                            modalContent.innerHTML = html;
                        })
                        .catch(err => {
                            modalContent.innerHTML = `<div class="p-4 text-danger">Error loading details.</div>`;
                            console.error(err);
                        });
                });
            });
        });
    </script>

}