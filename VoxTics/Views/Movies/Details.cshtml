@model VoxTics.Models.ViewModels.Movie.MovieDetailsVM
@{
    ViewData["Title"] = Model.Title;
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&family=Cinzel:wght@400;600;700&display=swap');

    :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        --gold-gradient: linear-gradient(135deg, #f6d365 0%, #fda085 100%);
        --dark-gradient: linear-gradient(135deg, #232526 0%, #414345 100%);
        --glass-bg: rgba(0, 0, 0, 0.2);
        --glass-border: rgba(255, 255, 255, 0.15);
        --shadow-cinematic: 0 25px 50px rgba(0, 0, 0, 0.5);
        --glow-gold: rgba(246, 211, 101, 0.6);
        --text-shadow: 0 2px 10px rgba(0, 0, 0, 0.7);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 25%, #2d1b69 50%, #11998e 75%, #38ef7d 100%);
        background-attachment: fixed;
        color: white;
        min-height: 100vh;
        overflow-x: hidden;
    }

    /* Cinematic Background Effects */
    .cinema-bg {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        opacity: 0.1;
    }

    .film-grain {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        opacity: 0.03;
        background: url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='1' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
        animation: grain 0.8s steps(8) infinite;
    }

    @@keyframes grain {
        0%, 100%

    {
        transform: translate(0, 0);
    }

    10% {
        transform: translate(-5%, -10%);
    }

    30% {
        transform: translate(3%, -15%);
    }

    50% {
        transform: translate(12%, 9%);
    }

    70% {
        transform: translate(9%, 4%);
    }

    90% {
        transform: translate(-1%, 7%);
    }

    }

    /* Hero Section with Parallax */
    .movie-hero {
        position: relative;
        min-height: 100vh;
        display: flex;
        align-items: center;
        overflow: hidden;
        margin-bottom: 4rem;
    }

    .hero-bg {
        position: absolute;
        top: 0;
        left: 0;
        width: 120%;
        height: 120%;
        background-image: linear-gradient(45deg, rgba(0,0,0,0.8), rgba(0,0,0,0.4)), url('@Model.DisplayImage');
        background-size: cover;
        background-position: center;
        filter: blur(3px) brightness(0.4);
        animation: slowZoom 20s ease-in-out infinite alternate;
        z-index: -1;
    }

    @@keyframes slowZoom {
        0%

    {
        transform: scale(1) rotate(0deg);
    }

    100% {
        transform: scale(1.1) rotate(1deg);
    }

    }

    .hero-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.8) 100%);
        z-index: 1;
    }

    .hero-content {
        position: relative;
        z-index: 2;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        gap: 3rem;
        align-items: center;
    }

    /* Movie Poster with 3D Effect */
    .poster-container {
        position: relative;
        perspective: 1000px;
    }

    .movie-poster {
        width: 350px;
        height: 500px;
        object-fit: cover;
        border-radius: 20px;
        box-shadow: var(--shadow-cinematic);
        border: 3px solid rgba(255, 255, 255, 0.1);
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        animation: posterFloat 6s ease-in-out infinite;
    }

    @@keyframes posterFloat {
        0%, 100%

    {
        transform: translateY(0) rotateY(5deg);
    }

    50% {
        transform: translateY(-10px) rotateY(-5deg);
    }

    }

    .movie-poster:hover {
        transform: scale(1.05) rotateY(15deg);
        box-shadow: 0 30px 60px rgba(0, 0, 0, 0.8), 0 0 50px var(--glow-gold);
    }

    .poster-glow {
        position: absolute;
        top: -20px;
        left: -20px;
        right: -20px;
        bottom: -20px;
        background: var(--gold-gradient);
        border-radius: 30px;
        opacity: 0;
        filter: blur(20px);
        transition: opacity 0.6s ease;
        z-index: -1;
    }

    .poster-container:hover .poster-glow {
        opacity: 0.6;
    }

    /* Movie Information */
    .movie-info {
        flex: 1;
        max-width: 600px;
    }

    .movie-title {
        font-family: 'Cinzel', serif;
        font-size: 4rem;
        font-weight: 700;
        background: var(--gold-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: var(--text-shadow);
        margin-bottom: 1rem;
        animation: titleGlow 3s ease-in-out infinite alternate;
        line-height: 1.1;
    }

    @@keyframes titleGlow {
        0%

    {
        filter: drop-shadow(0 0 10px rgba(246, 211, 101, 0.5));
    }

    100% {
        filter: drop-shadow(0 0 20px rgba(246, 211, 101, 0.8));
    }

    }

    .movie-tagline {
        font-size: 1.3rem;
        font-weight: 300;
        color: rgba(255, 255, 255, 0.9);
        margin-bottom: 2rem;
        font-style: italic;
        text-shadow: var(--text-shadow);
    }

    /* Premium Badges */
    .badge-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .badge-premium {
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        font-size: 0.9rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.4s ease;
    }

        .badge-premium::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.6s ease;
        }

        .badge-premium:hover::before {
            left: 100%;
        }

    .badge-status {
        background: var(--primary-gradient);
        color: white;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .badge-rating {
        background: var(--gold-gradient);
        color: #333;
        box-shadow: 0 4px 15px var(--glow-gold);
    }

    .badge-premium:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    /* Movie Stats */
    .movie-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 1rem;
        margin: 2rem 0;
        padding: 2rem;
        background: var(--glass-bg);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        border: 1px solid var(--glass-border);
    }

    .stat-item {
        text-align: center;
        padding: 1rem;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        background: var(--gold-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        display: block;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    /* Content Sections */
    .content-section {
        margin-bottom: 4rem;
        animation: fadeInUp 1s ease-out;
    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .section-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 2rem;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        position: relative;
        display: inline-block;
    }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 60px;
            height: 4px;
            background: var(--gold-gradient);
            border-radius: 2px;
        }

    /* Categories & Cast */
    .tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .tag-item {
        background: var(--glass-bg);
        backdrop-filter: blur(10px);
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        border: 1px solid var(--glass-border);
        transition: all 0.3s ease;
        font-weight: 500;
    }

        .tag-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

    .cast-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .cast-card {
        background: var(--glass-bg);
        backdrop-filter: blur(15px);
        border-radius: 15px;
        padding: 1.5rem;
        border: 1px solid var(--glass-border);
        transition: all 0.4s ease;
        text-align: center;
    }

        .cast-card:hover {
            transform: translateY(-10px) scale(1.02);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

    .cast-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        margin: 0 auto 1rem;
        border: 3px solid var(--gold-gradient);
        transition: all 0.3s ease;
    }

    .cast-card:hover .cast-avatar {
        transform: scale(1.1);
        box-shadow: 0 0 20px var(--glow-gold);
    }

    .cast-name {
        font-weight: 600;
        color: white;
        font-size: 1.1rem;
    }

    /* Trailer Section */
    .trailer-container {
        position: relative;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: var(--shadow-cinematic);
        margin: 2rem 0;
    }

    .trailer-frame {
        width: 100%;
        height: 500px;
        border: none;
        transition: all 0.3s ease;
    }

    .trailer-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
        pointer-events: none;
    }

    .trailer-container:hover .trailer-overlay {
        opacity: 1;
    }

    /* Gallery with Lightbox */
    .gallery-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .gallery-item {
        position: relative;
        border-radius: 15px;
        overflow: hidden;
        cursor: pointer;
        transition: all 0.4s ease;
        aspect-ratio: 16/9;
    }

    .gallery-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: all 0.6s ease;
    }

    .gallery-item:hover {
        transform: scale(1.03);
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.5);
    }

        .gallery-item:hover .gallery-img {
            transform: scale(1.1);
            filter: brightness(1.2);
        }

    .gallery-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .gallery-item:hover .gallery-overlay {
        opacity: 1;
    }

    .zoom-icon {
        font-size: 2rem;
        color: white;
        background: var(--primary-gradient);
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

        .zoom-icon:hover {
            transform: scale(1.2);
            background: var(--gold-gradient);
        }

    /* Showtimes */
    .showtimes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .showtime-card {
        background: var(--glass-bg);
        backdrop-filter: blur(15px);
        border-radius: 15px;
        padding: 2rem;
        border: 1px solid var(--glass-border);
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
    }

        .showtime-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--gold-gradient);
        }

        .showtime-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
        }

    .hall-name {
        font-size: 1.3rem;
        font-weight: 600;
        color: white;
        margin-bottom: 1rem;
    }

    .showtime-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1rem;
    }

    .showtime-time {
        font-size: 1.1rem;
        font-weight: 500;
        color: rgba(255, 255, 255, 0.9);
    }

    .showtime-price {
        font-size: 1.2rem;
        font-weight: 700;
        background: var(--gold-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    /* Lightbox Modal */
    .lightbox {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.95);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.4s ease;
    }

        .lightbox.active {
            opacity: 1;
            visibility: visible;
        }

    .lightbox-content {
        max-width: 90vw;
        max-height: 90vh;
        border-radius: 15px;
        overflow: hidden;
        transform: scale(0.8);
        transition: all 0.4s ease;
    }

    .lightbox.active .lightbox-content {
        transform: scale(1);
    }

    .lightbox-img {
        width: 100%;
        height: auto;
        display: block;
    }

    .lightbox-close {
        position: absolute;
        top: 2rem;
        right: 2rem;
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        font-size: 2rem;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    }

        .lightbox-close:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .hero-content

    {
        flex-direction: column;
        text-align: center;
        padding: 2rem 1rem;
    }

    .movie-poster {
        width: 280px;
        height: 400px;
    }

    .movie-title {
        font-size: 2.5rem;
    }

    .movie-stats {
        grid-template-columns: repeat(2, 1fr);
    }

    .cast-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }

    }
</style>

<!-- Film grain overlay -->
<div class="film-grain"></div>

<!-- Hero Section -->
<section class="movie-hero">
    <div class="hero-bg"></div>
    <div class="hero-overlay"></div>

    <div class="hero-content">
        <div class="poster-container">
            <div class="poster-glow"></div>
            <img src="@Model.DisplayImage" class="movie-poster" alt="@Model.Title" onerror="this.src='/images/default-movie.jpg'" />
        </div>

        <div class="movie-info">
            <h1 class="movie-title">@Model.Title</h1>
            <p class="movie-tagline">@Model.ShortDescription</p>

            <div class="badge-container">
                <span class="badge-premium badge-status">@Model.Status</span>
                <span class="badge-premium badge-rating">⭐ @Model.Rating</span>
            </div>

            <div class="movie-stats">
                <div class="stat-item">
                    <span class="stat-value">@Model.Duration</span>
                    <span class="stat-label">Minutes</span>
                </div>
                <div class="stat-item">
                    <span class="stat-value">$@Model.Price</span>
                    <span class="stat-label">Price</span>
                </div>
                <div class="stat-item">
                    <span class="stat-value">@Model.ReleaseDate.Year</span>
                    <span class="stat-label">Release</span>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container">
    <!-- Categories Section -->
    @if (Model.Categories.Any())
    {
        <section class="content-section">
            <h2 class="section-title">Genres</h2>
            <div class="tags-container">
                @foreach (var category in Model.Categories)
                {
                    <div class="tag-item">
                        <i class="fas fa-tag me-2"></i>@category.Name
                    </div>
                }
            </div>
        </section>
    }

    <!-- Cast Section -->
    @if (Model.Cast.Any())
    {
        <section class="content-section">
            <h2 class="section-title">Starring</h2>
            <div class="cast-grid">
                @foreach (var actor in Model.Cast)
                {
                    <div class="cast-card">
                        <img src="@actor.ImageUrl ?? " /images/default-actor.jpg"" class="cast-avatar" alt="@actor.FullName" />
                        <div class="cast-name">@actor.FullName</div>
                    </div>
                }
            </div>
        </section>
    }

    <!-- Trailer Section -->
    @if (!string.IsNullOrEmpty(Model.TrailerUrl))
    {
        <section class="content-section">
            <h2 class="section-title">Official Trailer</h2>
            <div class="trailer-container">
                <iframe src="@Model.TrailerUrl" class="trailer-frame" title="Movie Trailer" allowfullscreen></iframe>
                <div class="trailer-overlay">
                    <i class="fas fa-play" style="font-size: 4rem; color: rgba(255,255,255,0.8);"></i>
                </div>
            </div>
        </section>
    }

    <!-- Gallery Section -->
    @if (Model.GalleryImages.Any())
    {
        <section class="content-section">
            <h2 class="section-title">Gallery</h2>
            <div class="gallery-grid">
                @foreach (var img in Model.GalleryImages)
                {
                    <div class="gallery-item" onclick="openLightbox('@img')">
                        <img src="@img" class="gallery-img" alt="Movie Gallery" onerror="this.src='/images/default-movie.jpg'" />
                        <div class="gallery-overlay">
                            <div class="zoom-icon">
                                <i class="fas fa-search-plus"></i>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </section>
    }

    <!-- Showtimes Section -->
    @if (Model.Showtimes.Any())
    {
        <section class="content-section">
            <h2 class="section-title">Showtimes</h2>
            <div class="showtimes-grid">
                @foreach (var showtime in Model.Showtimes)
                {
                    <div class="showtime-card">
                        <div class="hall-name">
                            <i class="fas fa-video me-2"></i>@showtime.HallName
                        </div>
                        <div class="showtime-details">
                            <div class="showtime-time">
                                <i class="fas fa-clock me-2"></i>@showtime.StartTime.ToString("hh:mm tt")
                            </div>
                            <div class="showtime-price">$@showtime.Price</div>
                        </div>
                    </div>
                }
            </div>
        </section>
    }
</div>

<!-- Lightbox Modal -->
<div class="lightbox" id="lightbox" onclick="closeLightbox()">
    <button class="lightbox-close" onclick="closeLightbox()">
        <i class="fas fa-times"></i>
    </button>
    <div class="lightbox-content">
        <img id="lightbox-img" class="lightbox-img" src="" alt="Gallery Image" />
    </div>
</div>

<script>
    // Lightbox functionality
    function openLightbox(imageSrc) {
        const lightbox = document.getElementById('lightbox');
        const lightboxImg = document.getElementById('lightbox-img');

        lightboxImg.src = imageSrc;
        lightbox.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
        const lightbox = document.getElementById('lightbox');
        lightbox.classList.remove('active');
        document.body.style.overflow = 'auto';
    }

    // Close lightbox with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeLightbox();
        }
    });

    // Prevent lightbox close when clicking on image
    document.querySelector('.lightbox-content').addEventListener('click', function(e) {
        e.stopPropagation();
    });

    // Parallax effect for hero background
    window.addEventListener('scroll', function() {
        const scrolled = window.pageYOffset;
        const rate = scrolled * -0.5;
        const heroImage = document.querySelector('.hero-bg');
        if (heroImage) {
            heroImage.style.transform = `translateY(${rate}px)`;
        }
    });

    // Animate elements on scroll
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.animationPlayState = 'running';
            }
        });
    }, observerOptions);

    // Observe all content sections
    document.querySelectorAll('.content-section').forEach(section => {
        section.style.animationPlayState = 'paused';
        observer.observe(section);
    });

    // Add loading animation for poster
    const moviePoster = document.querySelector('.movie-poster');
    moviePoster.addEventListener('load', function() {
        this.style.opacity = '1';
        this.style.transform = 'scale(1)';
    });

    // Set initial state for poster
    moviePoster.style.opacity = '0';
    moviePoster.style.transform = 'scale(0.9)';
    moviePoster.style.transition = 'all 0.6s ease';
</script>

<!-- Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">